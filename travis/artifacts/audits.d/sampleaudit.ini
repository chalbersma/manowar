[GLOBAL]

jellyfishversion = 2

; Sample CVE Needs to be unique across all of the pkgsample
[cve-2016-pkgsample2]

; pkgname
vuln-name="sampleaudit"
; Short Description
vuln-short-description="Short Description of Vulnerability2"
; Long Description Multiline needs
vuln-long-description="Longer Description of Vulnerability totally can be multiline commens bro just go on and on about this shit."
; Primary Link 
vuln-primary-link="http://samplecve.org/cve-2106-pkgsample"
; (Optional) Additional Link
vuln-additional-links ={ "LINK DESCRIPTION" : "http://samplecve_site2.org/cve-2016-pkgsample",
						"LINK2 Description" : "http://samplecve_site3.org/description",
						"LINK3 Description" : "http://newssite.com/bigshit"
						}

; Priority Int between 0-10. 5 is the Default
vuln-priority=5

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Filter Types
; Use filters to match a subset of the hosts
; is = collection in ( string | [ list ] )
; match = re.search ( regexstring, collection ) | Pass if it returns something
; nematch = re.search (regexstring, collection ) | Pass if it returns nothing
; gt = collection > int
; lt = colleciton < int
; eq = collection == int
; Apt Matches
; aptis = collection in ( string | [ list ] )
; aptmatch  = re.search (regexstring, collection )
; aptis = collection in ( string | [ list ] )
; aptge = apt_pkg.version_compare( match, collection )
; if match is greater than or equal to collection
filters={ "precise-bucket" : { "filter-match" : "is",
						"filter-collection-type" : "release",
						"filter-collection-subtype" : "default",
						"filter-match-value" : "precise"},
		  "trusty-bucket" : { "filter-match" : "is",
						"filter-collection-type" : "release",
						"filter-collection-subtype" : "default",
						"filter-match-value" : "trusty"},
		  "xenial-bucket" : { "filter-match" : "is",
						"filter-collection-type" : "release",
						"filter-collection-subtype" : "default",
						"filter-match-value" : "xenial"} }
						
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Comparison types
; Use comparison to see if filtered hosts are vulnerable
; is = collection in ( string |  [ list ] )
; match = re.search ( regexstring, collection )
; gt = collection > int
; lt = colleciton < int
; eq = collection == int
; Apt Matches
; aptis = collection in ( string | [ list ] )
; aptmatch  = re.search (regexstring, collection )
; aptis = collection in ( string | [ list ] )
; aptge = apt_pkg.version_compare( match, collection )
; if match is greater than or equal to collection
; Subtype Comparisons
; Compare against a list of subtypes
; subnonhere = Make sure a list of collection-subtypes is not there. Match all subtypes as not here or limit it with a regex in the match-value
; suballhere = Make sure a list of collection-subtypes is there. Match all subtypes or limit good subtypes with a regex in the match-value
; 		allows for additional subtypes to exist on the host that aren't in the config.
; subknowall = Make sure a list of collection-subtypes represents all the subtypes on the host. You can overspecify audit subtypes. Additionally you can
; 		restrict matches to only match items that match a regex in the match-value

comparisons={ "precise-bucket" : { "comparison-match" : "aptge",
							"comparison-collection-type" : "packages",
							"comparison-collection-subtype" : "bash",
							"comparison-match-value" : "0" },
			  "trusty-bucket" : { "comparison-match" : "aptge",
							"comparison-collection-type" : "packages",
							"comparison-collection-subtype" : "bash",
							"comparison-match-value" : "0" },
			  "xenial-bucket" : { "comparison-match" : "aptge",
							"comparison-collection-type" : "packages",
							"comparison-collection-subtype" : "bash",
							"comparison-match-value" : "0" },
			  "bionic-bucket" : { "comparison-match" : "aptge",
							"comparison-collection-type" : "packages",
							"comparison-collection-subtype" : "bash",
							"comparison-match-value" : "0" } }

