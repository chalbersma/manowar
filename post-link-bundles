#!/bin/bash
# Post link bundles script for secops bundles
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 
   exit 1
fi



mkdir -p /var/log/secops
# Make Log Files
touch /var/log/secops/{ui,schedlog,analyze}.log.{1..9}

HOSTNAME=`hostname`
RELEASE=$(lsb_release -cs)
MDBInstalled=false
DOMAIN_ROOT=$(/EdgeCast/base/getSrvinfo domain-root)

subpurposes=$(/EdgeCast/base/getSrvinfo subpurposes)

# SVN Checkouts handled by Salt Now
#if [[ -d /oc/local/secops ]]
#	/EdgeCast/base/bin/svn-helper checkout ${svnrepo} /oc/local/secops
#else
	# Just do an update
	#/EdgeCast/base/bin/svn-helper up /oc/local/secops
#fi

RUN_LOC="/EdgeCast/secops/"
SETUP_LOC="${RUN_LOC}/setup/"

if [[ "${subpurposes}" =~ "jellyfish-base" ]] ; then
	# Install MDB Key
	#MDBKeyFingerprint="Key fingerprint = 1993 69E5 404B D5FC 7D2F  E43B CBCB 082A 1BB9 43DB"
	#MDBKeyLoc="${SETUP_LOC}mariadbkey.gpg"

	# Required Packages
	APTREQPKGS="python3 software-properties-common python3-apt build-essential libssl-dev libffi-dev python3-dev python-virtualenv apache2"
	PIPREQPKGS="virtualenv paramiko pymysql flask requests flask-cors colorama cryptography appdirs jsonschema feedparser cssselect lxml pika"

	# Install APT Packages Required
	DEBIAN_FRONTEND=noninteractive apt-get install --force-yes -y ${APTREQPKGS} &> /dev/null
	if [[ $? -gt 0 ]]; then
		echo -e "Troubles Installing Base Packages Exiting without setup."
		exit 1
	fi

	############################################## PIP Setup ##############################################
	# happens for all subpurposes
	# Setup Virtual Environment
	pushd ${RUN_LOC}
	rm -rf venv
	virtualenv --system-site-packages -p python3 ${RUN_LOC}
	source ${RUN_LOC}/bin/activate
	pip install --upgrade setuptools
	for pippkg in ${PIPREQPKGS} ; do
		pip install ${pippkg}
	done
	popd

	# Deactivate Environment For continued Setup
	deactivate

	### Check for Other Jellyfish Related Subpurposes ##

	if [[ "${subpurposes}" =~ "jellyfish-db" ]] ; then
		# Do Install
		mdb_installed=$(dpkg -l mariadb-server | grep ii | wc -l)

		# Assuming MDB Is Installed
		if [[ ${mdb_installed} -gt 0 ]] ; then
			# MDB Is Installed
			echo "mariadb-server is installed. Assuming setup has been completed."
			assume_good=true
		else
			assume_good=false

			# Key Fingerprints now handled by Salt
			#keyexists=$(apt-key fingerprint | grep "${MDBKeyFingerprint}" | wc -l )
			#if [[ ${keyexists} -eq 0 ]] ; then
				# Install Key If it's gt 0 then the key is installed on the box
				#cat ${MDBKeyLoc} | apt-key add -
				#confirmkey=$(apt-key fingerprint | grep "${MDBKeyFingerprint}" | wc -l 	)
				#if [[ ${confirmkey} -eq 0 ]] ; then
					# Problem
					#echo -e "Warning: MariaDB Package Signing key can't be added and can't be found."
				#fi
			#fi


			# Trusty install MariaDB Repository
			#cp  "${SETUP_LOC}mdb-repo-${RELEASE}.list" /etc/apt/sources.list.d/mdb-repo.list

			# Do AN Apt-Get Update
			apt-get update &> /dev/null

			# software-properties-common
			DEBIAN_FRONTEND=noninteractive apt-get install --force-yes -y  mariadb-server mariadb-client mariadb-common &> /dev/null
			mdb_install_good=$?

			if [[ ${mdb_install_good} -gt 0 ]] ; then
				echo -e "Warning: MariaDB Server, Client and/or Common had trouble installing. Please investigate."
			fi

			# Install MariaDB Jellyfish 2 Schema
			cat ${SETUP_LOC}jellyfish2_db_schema.sql | mysql

			# Install J2 Users
			cat /oc/local/secops/jellyfish2/setup/jellyfish2_db_users.sql | mysql

			# Disable Remove Root Login
			echo "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')" | mysql

			# Set MYSQL Root
			# Moving to a Sub command to get around Salt Bug https://github.com/saltstack/salt/issues/12482
			ROOTPW=$(${SETUP_LOC}\gen-pass.py)
			echo -e "set password for 'root'@'localhost' = PASSWORD('${ROOTPW}'); set password for 'root'@'::1' = PASSWORD('${ROOTPW}'); set password for 'root'@'127.0.0.1' = PASSWORD('${ROOTPW}')" | mysql

			echo -e "[client]" > /root/.my.cnf
			echo -e "user=root" >>  /root/.my.cnf
			echo -e "password=${ROOTPW}" >>  /root/.my.cnf

			# Message Users
			echo -e "Root Password set and Saved to /root/.my.cnf . Please place that somewhere safer."
		fi
	fi

	################################################### UI #########################
	# Only for the jellyfish-ui subpurpose
	# Install J2 - UI Service File
	if [[ "${subpurposes}" =~ "jellyfish-ui" ]] ; then
		if [[ "${RELEASE}" == "trusty" ]] ; then
			if [[ -h /etc/init.d/jellyfish2-ui ]] ; then
				# Unlink and relink if neccessary
				#unlink /etc/init.d/jellyfish2-ui
				true
			fi
			# Link Service File
			#ln -s ${SETUP_LOC}/jellyfish2-ui /etc/init.d/jellyfish2-ui
			# Set Service to Start on Boot
			#update-rc.d jellyfish2-ui enable
			# Restart Service (Just in Case)
			#service jellyfish2-ui restart
		
			# Configure Auth and FE goodness.
			#cp /oc/local/secops/jellyfish2/setup/jellyfish_flask.conf /etc/apache2/sites-available/
			
			# Copy UI Components
			cp -r /EdgeCast/secops/static/ui/* /var/www/
			
			#a2enmod ssl
			#a2enmod proxy
			#a2enmod proxy_http
			#a2enmod authnz_ldap
			#a2enmod headers
			#a2enmod wsgi
			#a2dissite 000-default.conf
			#a2ensite jellyfish_flask

			service apache2 restart


		elif [ "${RELEASE}" == "xenial" ] ; then
			echo -e "No Systemd Service File Yet."
		fi
	fi

	################################################# Collector Information ########
	if [[ "${subpurposes}" =~ "jellyfish-collector" ]] ; then
		# Setup Scheduler
		# Crontab Job for Scheduler is Setup by Salt
		echo -e "Scheduler Setup by Salt."
		# Analyze Job shoudl be setup by salt
		echo -e "Analyze Setup by Salt."
	fi

	############################################## SAPI Information ################
	if [[ "${subpurposes}" =~ "jellyfish-sapi" ]]; then
		if [[ "${RELEASE}" == "trusty" ]] ; then
			if [[ -h /etc/init.d/jellyfish2-sapi ]] ; then
				# Unlink and relink if neccessary
				#unlink /etc/init.d/jellyfish2-sapi
				true
			fi
			# Link Service File
			#ln -s ${SETUP_LOC}/jellyfish2-sapi /etc/init.d/jellyfish2-sapi
			# Set Service to Start on Boot
			#update-rc.d jellyfish2-sapi enable
			# Restart Service (Just in Case)
			#service jellyfish2-sapi restart
		
			# Configure Auth and FE goodness.
			#cp /oc/local/secops/jellyfish2/setup/jellyfish_sapi.conf /etc/apache2/sites-available/
					
			#a2enmod ssl
			#a2enmod proxy
			#a2enmod proxy_http
			#a2enmod authnz_ldap
			#a2enmod headers
			#a2enmod wsgi
			#a2dissite 000-default.conf
			#a2ensite jellyfish_sapi

			service apache2 restart


		elif [ "${RELEASE}" == "xenial" ] ; then
			echo -e "No Systemd Service File Yet."
		fi
	fi

else
	# No Jellyfish
	exit 0
fi
